{
    "comments": {
        "lineComment": "#",
        "blockComment": []
    },
    "brackets": [
        ["{", "}"],
        ["[", "]"],
        ["(", ")"]
    ],
    "autoClosingPairs": [
       { "open": "{", "close": "}" },
       { "open": "[", "close": "]" },
       { "open": "(", "close": ")" },
       { "open": "|", "close": "|", "notIn": ["string", "comment"] },
       { "open": "\"", "close": "\"", "notIn": ["string", "comment"] },
       { "open": "`", "close": "`", "notIn": ["string", "comment"] }
    ],
    "surroundingPairs": [
        ["{", "}"],
        ["[", "]"],
        ["(", ")"],
        ["|", "|"],
        ["\"", "\""],
        ["'", "'"]
    ],
    "wordPattern": "(-?\\d*\\.\\d\\w*)|[a-zA-Z_\\!?]+[\\w_!?]*|([^\\`\\~\\@\\#\\%\\^\\&\\*\\(\\)\\-\\=\\+\\[\\{\\]\\}\\\\\\|\\;\\:\\'\\\"\\,\\.\\<\\>\\/\\s]+)",
	"indentationRules": {
		"increaseIndentPattern": "\\s?(_loop|_finally|_then|_else|_block|_catch|_try|_when|_while|_protect|_protection)\\s?",
		"decreaseIndentPattern": "\\s?(_endloop|_endif|_endblock|_endcatch|_endtry|_endprotect)\\s?"
	},
	"keywords": {
        "_abstract": "Introduces an abstract method; that is, a method defined by a parent class which must be implemented by a subclass.",
        "_allresults": "Collects multiple results from a method or procedure invocation into a simple vector.",  
        "_and": "Boolean operator; result is true if both operands are true.",
        "_andif": "Boolean operator equivalent to _and except that evaluation stops once the result is determined.",
        "_block": "Introduces a block body.",
        "_catch": "Destination for transfer of control with a _throw statement. Can be labelled with an expression.",
        "_clone": "Within a method, refers to a copy of self (the current object). Receivers _self, _super, _private and _clone", 
        "_constant": "In a declaration, prevents reassignment to the variable after initialisation.",
        "_continue": "In a controlled or infinite loop, terminates execution of one iteration of the loop.",
        "_div": "Binary operator for integer division.",
        "_dynamic": "Introduces variable declaration. ",
        "_elif": "Introduces second and subsequent condition in a conditional.",
        "_else": "Introduces final block body in a conditional.",
        "_endblock": "Terminates _block statement.",
        "_endcatch": "Terminates _catch statement.",
        "_endif": "Terminates _if statement.",
        "_endlock": "Terminates _lock statement.",
        "_endloop": "Terminates _loop statement.",
        "_endmethod": "Terminates _method definition.",
        "_endproc": "Terminates _proc definition.",
        "_endprotect": "Terminates _protect statement.",
        "_endtry": "Terminates _try statement.",
        "_false": "Enumerated object with value false.",
        "_finally": "Used in controlled loops.",
        "_for": "Introduces controlled loop.",
        "_gather": "In an lvalue tuple, collects all remaining values into a simple vector.",
        "_global": "Introduces variable declaration.",
        "_handling": "Introduces statement sequence for handling a condition.",
        "_if": "Introduces conditional.",
        "_import": "Used in variable declarations.",
        "_is": "",
        "_isnt": "Identity operators.",
        "_iter": "Introduces an iterator method or procedure definition.",
        "_leave": "Terminates execution of a block or loop.",
        "_local": "Introduces variable declaration.",
        "_lock": "Introduces a _lock statement to gain exclusive access to an object.",
        "_loop": "Introduces the body of a loop.",
        "_loopbody": "Used in an iterator method or procedure to yield values to a controlled loop.",
        "_maybe": "Enumerated object with value maybe.",
        "_method": "Introduces method definition.",
        "_mod": "Remainder operator.",
        "_no_way": "Enumerated object with value no_way.",
        "_not": "Unary boolean operator.",
        "_optional": "In an argument list for a method or procedure definition, introduces optional arguments.",
        "_or": "Boolean operator; result is true if either operand is true.",
        "_orif": "Boolean operator equivalent to _or except that evaluation stops once the result is determined.",
        "_over": "Introduces iterator in controlled loop statement.",
        "_package": "Used at the top level to define the current package.",
        "_pragma": "Introduces classification of methods, classes, global variables, shared variables and so on.",
        "_private": "Introduces a private method definition.",
        "_proc": "Introduces a procedure definition.",
        "_protect": "Introduces a protected block.",
        "_locking": "_protect _locking Introduces a protected block with a lock.",
        "_protection": "Introduces protection code, executed if a protected block is abandoned.",
        "_recursive": "Used in a parallel variable declaration to declare the variables recursively.",
        "_return": "Introduces a _return statement, returning control from a method or procedure.",
        "_scatter": "In an rvalue tuple, distributes a vector into individual values.",
        "_self": "Within a method, refers to the target object. Within a procedure, refers to the procedure.",
        "_super": "Within a method, refers to a superclass of the target object.",
        "_then": "Introduces first condition in conditional.",
        "_thisthread": "The current thread.",
        "_throw": "Introduces a _throw statement to transfer control to a matching _catch statement.",
        "_true": "Enumerated object with value true.",
        "_try ": "ntroduces a statement sequence which may give rise to particular conditions; the statements for handling a condition are introduced by _when.",
        "_unset": "numerated object with value unset.",
        "_when": "ntroduces a list of conditions which may be raised by a _try statement.",
        "_with": "ntroduces value or value list in statements such as _leave, _throw, _handling.",
        "_xor":" //"
      }
}